{"ast":null,"code":"import _slicedToArray from\"/Users/akashkumargaur/sprintPlan/backend/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import firebase from\"firebase\";import React,{useEffect,useState}from\"react\";import roomImg from\"../../../../Assets/Images/room.png\";import userImg from\"../../../../Assets/Images/user.png\";import styles from\"../../index.module.scss\";import{useParams}from\"react-router\";import axios from\"axios\";import{useHistory}from\"react-router\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function PollResults(_ref){var setIsInvalidRoom=_ref.setIsInvalidRoom;var _useState=useState({}),_useState2=_slicedToArray(_useState,2),pollData=_useState2[0],setPollData=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),selectedPoll=_useState4[0],setSelectedPoll=_useState4[1];var _useParams=useParams(),pollId=_useParams.pollId;function setHasVoted(pollValue){var currentUserId=window.localStorage.getItem(\"loggedId\");var userRef=firebase.database().ref(pollId).child(currentUserId);userRef.update({voted:!selectedPoll.length,voteValue:pollValue===selectedPoll?\"\":pollValue});}var history=useHistory();useEffect(function(){fetchCurrentPollData();},[]);function fetchCurrentPollData(){axios.get(\"/poll/\".concat(pollId)).then(function(res){var response=res.data;setPollData(response);}).catch(function(err){history.replace(\"/\");});}if(!pollData){setIsInvalidRoom();return null;}return/*#__PURE__*/_jsxs(\"div\",{className:styles.resultsWrapper,children:[/*#__PURE__*/_jsxs(\"div\",{className:styles.cardHeader,children:[/*#__PURE__*/_jsxs(\"div\",{className:styles.pollName,children:[/*#__PURE__*/_jsx(\"img\",{src:roomImg,alt:\"RoomName\",className:styles.roomImg}),pollData.roomName]}),/*#__PURE__*/_jsxs(\"div\",{className:styles.logged,children:[/*#__PURE__*/_jsx(\"img\",{src:userImg,alt:\"User\",className:styles.userImg}),window.localStorage.getItem(\"loggedUser\")||\"User\"]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"\".concat(styles.seriesWrapper),children:pollData.series&&pollData.series.length&&pollData.series.map(function(entry,key){return/*#__PURE__*/_jsx(\"div\",{className:\"\".concat(styles.entryCard,\" \").concat(selectedPoll===entry.entryValue?styles.selectedPoll:\"\"),onClick:function onClick(){setSelectedPoll(entry.entryValue===selectedPoll?\"\":entry.entryValue);setHasVoted(entry.entryValue);},children:entry.entryValue},key);})})]});}export default PollResults;","map":{"version":3,"sources":["/Users/akashkumargaur/sprintPlan/backend/client/src/Scenes/PollScene/partials/PollResults/index.jsx"],"names":["firebase","React","useEffect","useState","roomImg","userImg","styles","useParams","axios","useHistory","PollResults","setIsInvalidRoom","pollData","setPollData","selectedPoll","setSelectedPoll","pollId","setHasVoted","pollValue","currentUserId","window","localStorage","getItem","userRef","database","ref","child","update","voted","length","voteValue","history","fetchCurrentPollData","get","then","res","response","data","catch","err","replace","resultsWrapper","cardHeader","pollName","roomName","logged","seriesWrapper","series","map","entry","key","entryCard","entryValue"],"mappings":"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","sourcesContent":["import firebase from \"firebase\";\nimport React, { useEffect, useState } from \"react\";\nimport roomImg from \"../../../../Assets/Images/room.png\";\nimport userImg from \"../../../../Assets/Images/user.png\";\nimport styles from \"../../index.module.scss\";\nimport { useParams } from \"react-router\";\nimport axios from \"axios\";\nimport { useHistory } from \"react-router\";\n\nfunction PollResults({ setIsInvalidRoom }) {\n  const [pollData, setPollData] = useState({});\n  const [selectedPoll, setSelectedPoll] = useState(\"\");\n  const { pollId } = useParams();\n\n  function setHasVoted(pollValue) {\n    const currentUserId = window.localStorage.getItem(\"loggedId\");\n    const userRef = firebase.database().ref(pollId).child(currentUserId);\n    userRef.update({\n      voted: !selectedPoll.length,\n      voteValue: pollValue === selectedPoll ? \"\" : pollValue,\n    });\n  }\n\n  let history = useHistory();\n\n  useEffect(() => {\n    fetchCurrentPollData();\n  }, []);\n\n  function fetchCurrentPollData() {\n    axios\n      .get(`/poll/${pollId}`)\n      .then((res) => {\n        const response = res.data;\n        setPollData(response);\n      })\n      .catch((err) => {\n        history.replace(\"/\");\n      });\n  }\n\n  if (!pollData) {\n    setIsInvalidRoom();\n    return null;\n  }\n\n  return (\n    <div className={styles.resultsWrapper}>\n      <div className={styles.cardHeader}>\n        <div className={styles.pollName}>\n          <img src={roomImg} alt=\"RoomName\" className={styles.roomImg} />\n          {pollData.roomName}\n        </div>\n        <div className={styles.logged}>\n          <img src={userImg} alt=\"User\" className={styles.userImg} />\n          {window.localStorage.getItem(\"loggedUser\") || \"User\"}\n        </div>\n      </div>\n      <div className={`${styles.seriesWrapper}`}>\n        {pollData.series &&\n          pollData.series.length &&\n          pollData.series.map((entry, key) => {\n            return (\n              <div\n                key={key}\n                className={`${styles.entryCard} ${\n                  selectedPoll === entry.entryValue ? styles.selectedPoll : \"\"\n                }`}\n                onClick={() => {\n                  setSelectedPoll(\n                    entry.entryValue === selectedPoll ? \"\" : entry.entryValue\n                  );\n                  setHasVoted(entry.entryValue);\n                }}\n              >\n                {entry.entryValue}\n              </div>\n            );\n          })}\n        {/* <button onClick={() => console.log(\"pollData\", pollData)}>check</button> */}\n      </div>\n    </div>\n  );\n}\n\nexport default PollResults;\n"]},"metadata":{},"sourceType":"module"}