{"ast":null,"code":"var _jsxFileName = \"/Users/akashkumargaur/sprintPlan/frontend/src/Scenes/PollScene/partials/NameInput/index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport { useParams } from \"react-router\";\nimport { enterUser } from \"../../../../utils/database.utils\";\nimport firebase from \"firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction NameInput({\n  close,\n  openModal\n}) {\n  _s();\n\n  const [name, setName] = useState(\"\");\n  let {\n    pollId\n  } = useParams();\n\n  const pushUser = () => {\n    const userRef = firebase.database().ref(pollId);\n    userRef.get().then(snapshot => {\n      if (snapshot.exists()) {\n        console.log(snapshot.val());\n        const users = snapshot.val();\n\n        for (let id in users) {\n          if (users[id].name === name) {\n            alert(\"User with same name already in room!!\"); //   openModal();\n          } else {\n            window.localStorage.setItem(\"loggedUser\", name);\n            enterUser(name, pollId);\n            close();\n          }\n        }\n      } else {\n        console.log(\"No data available\");\n        window.localStorage.setItem(\"loggedUser\", name);\n        enterUser(name, pollId);\n        close();\n      }\n    }).catch(error => {\n      console.error(error);\n    });\n  }; //   const pushUser = () => {\n  //     const userRef = firebase.database().ref(pollId);\n  //     userRef.on(\"value\", (snapshot) => {\n  //       const users = snapshot.val();\n  //       const tempUsers = [];\n  //       for (let id in users) {\n  //         if (users[id].name === name) {\n  //           setName(`${name}1`);\n  //         }\n  //         tempUsers.push({ id, ...users[id] });\n  //         // setLoggedUsers(tempUsers);\n  //         // if (users[id].name === window.localStorage.getItem(\"loggedUser\")) {\n  //         //   window.localStorage.setItem(\"loggedId\", id);\n  //         //   loggedId = id;\n  //         // }\n  //         console.log(\"tempUsersNI\", tempUsers);\n  //       }\n  //     });\n  //     addUser();\n  //   };\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\",\n      padding: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Please enter your name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      id: \"outlined-basic\",\n      variant: \"outlined\",\n      onChange: e => setName(e.target.value),\n      fullWidth: true,\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      disabled: !name.length,\n      onClick: () => {\n        if (name.length) {\n          pushUser();\n        }\n      },\n      style: {\n        marginTop: \"30px\"\n      },\n      children: \"Start Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n\n_s(NameInput, \"Wa9w+lzZnJa79l6IvpgEoM+m5SE=\", false, function () {\n  return [useParams];\n});\n\n_c = NameInput;\nexport default NameInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"NameInput\");","map":{"version":3,"sources":["/Users/akashkumargaur/sprintPlan/frontend/src/Scenes/PollScene/partials/NameInput/index.jsx"],"names":["React","useState","TextField","Button","useParams","enterUser","firebase","NameInput","close","openModal","name","setName","pollId","pushUser","userRef","database","ref","get","then","snapshot","exists","console","log","val","users","id","alert","window","localStorage","setItem","catch","error","textAlign","padding","e","target","value","length","marginTop"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,SAAT,QAA0B,kCAA1B;AACA,OAAOC,QAAP,MAAqB,UAArB;;;AAEA,SAASC,SAAT,CAAmB;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAnB,EAAyC;AAAA;;AACvC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,EAAD,CAAhC;AACA,MAAI;AAAEW,IAAAA;AAAF,MAAaR,SAAS,EAA1B;;AAEA,QAAMS,QAAQ,GAAG,MAAM;AACrB,UAAMC,OAAO,GAAGR,QAAQ,CAACS,QAAT,GAAoBC,GAApB,CAAwBJ,MAAxB,CAAhB;AACAE,IAAAA,OAAO,CACJG,GADH,GAEGC,IAFH,CAESC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,MAAT,EAAJ,EAAuB;AACrBC,QAAAA,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACI,GAAT,EAAZ;AACA,cAAMC,KAAK,GAAGL,QAAQ,CAACI,GAAT,EAAd;;AACA,aAAK,IAAIE,EAAT,IAAeD,KAAf,EAAsB;AACpB,cAAIA,KAAK,CAACC,EAAD,CAAL,CAAUf,IAAV,KAAmBA,IAAvB,EAA6B;AAC3BgB,YAAAA,KAAK,CAAC,uCAAD,CAAL,CAD2B,CAE3B;AACD,WAHD,MAGO;AACLC,YAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,YAA5B,EAA0CnB,IAA1C;AACAL,YAAAA,SAAS,CAACK,IAAD,EAAOE,MAAP,CAAT;AACAJ,YAAAA,KAAK;AACN;AACF;AACF,OAbD,MAaO;AACLa,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAK,QAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,YAA5B,EAA0CnB,IAA1C;AACAL,QAAAA,SAAS,CAACK,IAAD,EAAOE,MAAP,CAAT;AACAJ,QAAAA,KAAK;AACN;AACF,KAtBH,EAuBGsB,KAvBH,CAuBUC,KAAD,IAAW;AAChBV,MAAAA,OAAO,CAACU,KAAR,CAAcA,KAAd;AACD,KAzBH;AA0BD,GA5BD,CAJuC,CAkCvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,sBACE;AACE,IAAA,KAAK,EAAE;AACLC,MAAAA,SAAS,EAAE,QADN;AAELC,MAAAA,OAAO,EAAE;AAFJ,KADT;AAAA,4BAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YANF,eAOE,QAAC,SAAD;AACE,MAAA,EAAE,EAAC,gBADL;AAEE,MAAA,OAAO,EAAC,UAFV;AAGE,MAAA,QAAQ,EAAGC,CAAD,IAAOvB,OAAO,CAACuB,CAAC,CAACC,MAAF,CAASC,KAAV,CAH1B;AAIE,MAAA,SAAS,MAJX;AAKE,MAAA,QAAQ;AALV;AAAA;AAAA;AAAA;AAAA,YAPF,eAcE,QAAC,MAAD;AACE,MAAA,OAAO,EAAC,WADV;AAEE,MAAA,KAAK,EAAC,SAFR;AAGE,MAAA,QAAQ,EAAE,CAAC1B,IAAI,CAAC2B,MAHlB;AAIE,MAAA,OAAO,EAAE,MAAM;AACb,YAAI3B,IAAI,CAAC2B,MAAT,EAAiB;AACfxB,UAAAA,QAAQ;AACT;AACF,OARH;AASE,MAAA,KAAK,EAAE;AACLyB,QAAAA,SAAS,EAAE;AADN,OATT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAdF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgCD;;GAvFQ/B,S;UAEUH,S;;;KAFVG,S;AAyFT,eAAeA,SAAf","sourcesContent":["import React, { useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport { useParams } from \"react-router\";\nimport { enterUser } from \"../../../../utils/database.utils\";\nimport firebase from \"firebase\";\n\nfunction NameInput({ close, openModal }) {\n  const [name, setName] = useState(\"\");\n  let { pollId } = useParams();\n\n  const pushUser = () => {\n    const userRef = firebase.database().ref(pollId);\n    userRef\n      .get()\n      .then((snapshot) => {\n        if (snapshot.exists()) {\n          console.log(snapshot.val());\n          const users = snapshot.val();\n          for (let id in users) {\n            if (users[id].name === name) {\n              alert(\"User with same name already in room!!\");\n              //   openModal();\n            } else {\n              window.localStorage.setItem(\"loggedUser\", name);\n              enterUser(name, pollId);\n              close();\n            }\n          }\n        } else {\n          console.log(\"No data available\");\n          window.localStorage.setItem(\"loggedUser\", name);\n          enterUser(name, pollId);\n          close();\n        }\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  };\n\n  //   const pushUser = () => {\n  //     const userRef = firebase.database().ref(pollId);\n  //     userRef.on(\"value\", (snapshot) => {\n  //       const users = snapshot.val();\n  //       const tempUsers = [];\n  //       for (let id in users) {\n  //         if (users[id].name === name) {\n  //           setName(`${name}1`);\n  //         }\n  //         tempUsers.push({ id, ...users[id] });\n  //         // setLoggedUsers(tempUsers);\n  //         // if (users[id].name === window.localStorage.getItem(\"loggedUser\")) {\n  //         //   window.localStorage.setItem(\"loggedId\", id);\n  //         //   loggedId = id;\n  //         // }\n  //         console.log(\"tempUsersNI\", tempUsers);\n  //       }\n  //     });\n  //     addUser();\n  //   };\n\n  return (\n    <div\n      style={{\n        textAlign: \"center\",\n        padding: \"20px\",\n      }}\n    >\n      <h3>Please enter your name</h3>\n      <TextField\n        id=\"outlined-basic\"\n        variant=\"outlined\"\n        onChange={(e) => setName(e.target.value)}\n        fullWidth\n        required\n      />\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        disabled={!name.length}\n        onClick={() => {\n          if (name.length) {\n            pushUser();\n          }\n        }}\n        style={{\n          marginTop: \"30px\",\n        }}\n      >\n        Start Game\n      </Button>\n    </div>\n  );\n}\n\nexport default NameInput;\n"]},"metadata":{},"sourceType":"module"}