{"ast":null,"code":"var _jsxFileName = \"/Users/akashkumargaur/sprintPlan/frontend/src/Scenes/PollScene/partials/PollResults/index.jsx\",\n    _s = $RefreshSig$();\n\nimport firebase from \"firebase\";\nimport React, { useEffect, useState } from \"react\";\nimport roomImg from \"../../../../Assets/Images/room.png\";\nimport userImg from \"../../../../Assets/Images/user.png\";\nimport styles from \"../../index.module.scss\";\nimport { useHistory, useParams } from \"react-router\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PollResults({\n  loggedUsers,\n  loggedUser\n}) {\n  _s();\n\n  const [pollData, setPollData] = useState({});\n  const [selectedPoll, setSelectedPoll] = useState(\"\");\n  const currentUser = window.localStorage.getItem(\"loggedUser\");\n  const {\n    pollId\n  } = useParams();\n\n  function setHasVoted() {\n    const userWithID = loggedUsers.filter(entry => entry.name === currentUser);\n    const currentUserId = userWithID[0].id;\n    const userRef = firebase.database().ref(pollId).child(currentUserId);\n    userRef.update({\n      voted: !selectedPoll.length\n    });\n  }\n\n  useEffect(() => {\n    fetchCurrentPollData();\n  }, []);\n\n  function fetchCurrentPollData() {\n    var db = firebase.firestore();\n    db.collection(\"polls\").doc(pollId).onSnapshot(doc => {\n      if (doc.data()) {\n        console.log(\"doc.data()\", doc.data());\n        setPollData(doc.data());\n      }\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.resultsWrapper,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.cardHeader,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.pollName,\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: roomImg,\n          alt: \"RoomName\",\n          className: styles.roomImg\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), pollData.roomName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.logged,\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: userImg,\n          alt: \"User\",\n          className: styles.userImg\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), loggedUser ? loggedUser.displayName : \"User\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${styles.seriesWrapper}`,\n      children: pollData.series && pollData.series.length && pollData.series.map((entry, key) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `${styles.entryCard} ${selectedPoll === entry.entryValue ? styles.selectedPoll : \"\"}`,\n          onClick: () => {\n            setHasVoted();\n            setSelectedPoll(entry.entryValue === selectedPoll ? \"\" : entry.entryValue);\n          },\n          children: entry.entryValue\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PollResults, \"j+hahHL5o6nAbEyYdbwVpciT3D4=\", false, function () {\n  return [useParams];\n});\n\n_c = PollResults;\nexport default PollResults;\n\nvar _c;\n\n$RefreshReg$(_c, \"PollResults\");","map":{"version":3,"sources":["/Users/akashkumargaur/sprintPlan/frontend/src/Scenes/PollScene/partials/PollResults/index.jsx"],"names":["firebase","React","useEffect","useState","roomImg","userImg","styles","useHistory","useParams","axios","PollResults","loggedUsers","loggedUser","pollData","setPollData","selectedPoll","setSelectedPoll","currentUser","window","localStorage","getItem","pollId","setHasVoted","userWithID","filter","entry","name","currentUserId","id","userRef","database","ref","child","update","voted","length","fetchCurrentPollData","db","firestore","collection","doc","onSnapshot","data","console","log","resultsWrapper","cardHeader","pollName","roomName","logged","displayName","seriesWrapper","series","map","key","entryCard","entryValue"],"mappings":"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","sourcesContent":["import firebase from \"firebase\";\nimport React, { useEffect, useState } from \"react\";\nimport roomImg from \"../../../../Assets/Images/room.png\";\nimport userImg from \"../../../../Assets/Images/user.png\";\nimport styles from \"../../index.module.scss\";\nimport { useHistory, useParams } from \"react-router\";\nimport axios from \"axios\";\n\nfunction PollResults({ loggedUsers, loggedUser }) {\n  const [pollData, setPollData] = useState({});\n  const [selectedPoll, setSelectedPoll] = useState(\"\");\n  const currentUser = window.localStorage.getItem(\"loggedUser\");\n  const { pollId } = useParams();\n\n  function setHasVoted() {\n    const userWithID = loggedUsers.filter(\n      (entry) => entry.name === currentUser\n    );\n    const currentUserId = userWithID[0].id;\n    const userRef = firebase.database().ref(pollId).child(currentUserId);\n    userRef.update({\n      voted: !selectedPoll.length,\n    });\n  }\n\n  useEffect(() => {\n    fetchCurrentPollData();\n  }, []);\n\n  function fetchCurrentPollData() {\n    var db = firebase.firestore();\n    db.collection(\"polls\")\n      .doc(pollId)\n      .onSnapshot((doc) => {\n        if (doc.data()) {\n          console.log(\"doc.data()\", doc.data());\n          setPollData(doc.data());\n        }\n      });\n  }\n\n  return (\n    <div className={styles.resultsWrapper}>\n      <div className={styles.cardHeader}>\n        <div className={styles.pollName}>\n          <img src={roomImg} alt=\"RoomName\" className={styles.roomImg} />\n          {pollData.roomName}\n        </div>\n        <div className={styles.logged}>\n          <img src={userImg} alt=\"User\" className={styles.userImg} />\n          {loggedUser ? loggedUser.displayName : \"User\"}\n        </div>\n      </div>\n      <div className={`${styles.seriesWrapper}`}>\n        {pollData.series &&\n          pollData.series.length &&\n          pollData.series.map((entry, key) => {\n            return (\n              <div\n                key={key}\n                className={`${styles.entryCard} ${\n                  selectedPoll === entry.entryValue ? styles.selectedPoll : \"\"\n                }`}\n                onClick={() => {\n                  setHasVoted();\n                  setSelectedPoll(\n                    entry.entryValue === selectedPoll ? \"\" : entry.entryValue\n                  );\n                }}\n              >\n                {entry.entryValue}\n              </div>\n            );\n          })}\n        {/* <button onClick={() => console.log(\"pollData\", pollData)}>check</button> */}\n      </div>\n    </div>\n  );\n}\n\nexport default PollResults;\n"]},"metadata":{},"sourceType":"module"}