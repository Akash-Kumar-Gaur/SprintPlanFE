{"ast":null,"code":"var _jsxFileName = \"/Users/akashkumargaur/sprintPlan/backend/frontend/src/Scenes/PollScene/partials/NameInput/index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport { useParams } from \"react-router\";\nimport { enterUser } from \"../../../../utils/database.utils\";\nimport firebase from \"firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction NameInput({\n  close,\n  isInvalidRoom\n}) {\n  _s();\n\n  const [name, setName] = useState(\"\");\n  let {\n    pollId\n  } = useParams();\n\n  const pushUser = () => {\n    const userRef = firebase.database().ref(pollId);\n    userRef.get().then(snapshot => {\n      if (snapshot.exists()) {\n        console.log(snapshot.val());\n        const users = snapshot.val();\n\n        for (let id in users) {\n          if (users[id].name === name) {\n            alert(\"User with same name already in room!!\");\n            setName(\"\");\n          } else {\n            window.localStorage.setItem(\"loggedUser\", name);\n            enterUser(name, pollId);\n            close();\n          }\n        }\n      } else {\n        console.log(\"No data available\");\n        window.localStorage.setItem(\"loggedUser\", name);\n        enterUser(name, pollId);\n        close();\n      }\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n\n  const handleInput = e => {\n    setName(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    noValidate: true,\n    autoComplete: \"off\",\n    onSubmit: pushUser,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: \"center\",\n        padding: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: isInvalidRoom ? \"Invalid Room ID !!!\" : \"Please enter your name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), !isInvalidRoom ? /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"outlined-basic\",\n        variant: \"outlined\",\n        onChange: e => handleInput(e),\n        fullWidth: true,\n        required: true,\n        value: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this) : null, /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        disabled: !name.length,\n        onClick: () => {\n          if (name.length) {\n            pushUser();\n          }\n        },\n        style: {\n          marginTop: \"30px\"\n        },\n        children: isInvalidRoom ? \"Go back Home\" : \"Start Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n\n_s(NameInput, \"Wa9w+lzZnJa79l6IvpgEoM+m5SE=\", false, function () {\n  return [useParams];\n});\n\n_c = NameInput;\nexport default NameInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"NameInput\");","map":{"version":3,"sources":["/Users/akashkumargaur/sprintPlan/backend/frontend/src/Scenes/PollScene/partials/NameInput/index.jsx"],"names":["React","useState","TextField","Button","useParams","enterUser","firebase","NameInput","close","isInvalidRoom","name","setName","pollId","pushUser","userRef","database","ref","get","then","snapshot","exists","console","log","val","users","id","alert","window","localStorage","setItem","catch","error","handleInput","e","target","value","textAlign","padding","length","marginTop"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport { useParams } from \"react-router\";\nimport { enterUser } from \"../../../../utils/database.utils\";\nimport firebase from \"firebase\";\n\nfunction NameInput({ close, isInvalidRoom }) {\n  const [name, setName] = useState(\"\");\n  let { pollId } = useParams();\n\n  const pushUser = () => {\n    const userRef = firebase.database().ref(pollId);\n    userRef\n      .get()\n      .then((snapshot) => {\n        if (snapshot.exists()) {\n          console.log(snapshot.val());\n          const users = snapshot.val();\n          for (let id in users) {\n            if (users[id].name === name) {\n              alert(\"User with same name already in room!!\");\n              setName(\"\");\n            } else {\n              window.localStorage.setItem(\"loggedUser\", name);\n              enterUser(name, pollId);\n              close();\n            }\n          }\n        } else {\n          console.log(\"No data available\");\n          window.localStorage.setItem(\"loggedUser\", name);\n          enterUser(name, pollId);\n          close();\n        }\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  };\n\n  const handleInput = (e) => {\n    setName(e.target.value);\n  };\n\n  return (\n    <form noValidate autoComplete=\"off\" onSubmit={pushUser}>\n      <div\n        style={{\n          textAlign: \"center\",\n          padding: \"20px\",\n        }}\n      >\n        <h3>\n          {isInvalidRoom ? \"Invalid Room ID !!!\" : \"Please enter your name\"}\n        </h3>\n        {!isInvalidRoom ? (\n          <TextField\n            id=\"outlined-basic\"\n            variant=\"outlined\"\n            onChange={(e) => handleInput(e)}\n            fullWidth\n            required\n            value={name}\n          />\n        ) : null}\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={!name.length}\n          onClick={() => {\n            if (name.length) {\n              pushUser();\n            }\n          }}\n          style={{\n            marginTop: \"30px\",\n          }}\n        >\n          {isInvalidRoom ? \"Go back Home\" : \"Start Game\"}\n        </Button>\n      </div>\n    </form>\n  );\n}\n\nexport default NameInput;\n"]},"metadata":{},"sourceType":"module"}